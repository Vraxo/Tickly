<?xml version="1.0" encoding="utf-8" ?>
<!-- Views/AddTaskPopupPage.xaml -->
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:models="clr-namespace:Tickly.Models"
             xmlns:converters="clr-namespace:Tickly.Converters"
             xmlns:vm="clr-namespace:Tickly.Views"
             x:Class="Tickly.Views.AddTaskPopupPage"
             x:DataType="vm:AddTaskPopupPageViewModel"
             BackgroundColor="Black"
             Title="{Binding PageTitle}">
    <!-- Dynamic Page Title (Add New Task / Edit Task) -->
    <!-- Set DataType for compile-time checking and intellisense -->

    <ContentPage.Resources>
        <ResourceDictionary>
            <converters:InverseBooleanConverter x:Key="InverseBooleanConverter" />
            <!-- Ensure Primary color is defined globally in App.xaml or Resources/Styles/Colors.xaml -->
            <!-- <Color x:Key="Primary">#512BD4</Color> -->

            <!-- Optional: Define a style for the minimalist Entry -->
            <Style TargetType="Entry" x:Key="MinimalEntry">
                <Setter Property="TextColor" Value="White" />
                <Setter Property="PlaceholderColor" Value="Gray" />
                <Setter Property="BackgroundColor" Value="Transparent" />
                <Setter Property="Margin" Value="0,0,0,5" />
                <!-- Add some bottom margin for spacing -->
                <!-- You might need platform-specific tweaks or borders defined here for better visibility -->
            </Style>
        </ResourceDictionary>
    </ContentPage.Resources>

    <ScrollView>
        <VerticalStackLayout Padding="20" Spacing="15">

            <!-- Task Title Input -->
            <Label Text="Task Title" TextColor="WhiteSmoke"/>
            <!-- Removed the Frame, applying style directly to Entry -->
            <Entry x:Name="TitleEntry"
                   Placeholder="Enter task title"
                   Text="{Binding Title}"
                   Style="{StaticResource MinimalEntry}" />
            <!-- Note: The minimal style makes it just text/placeholder on a transparent background -->


            <!-- Priority Selection -->
            <Label Text="Priority" TextColor="WhiteSmoke"/>
            <HorizontalStackLayout Spacing="10" BindableLayout.ItemsSource="{Binding PriorityOptions}">
                <BindableLayout.ItemTemplate>
                    <DataTemplate x:DataType="vm:SelectableOption(models:TaskPriority)">
                        <RadioButton GroupName="PriorityGroup"
                                     IsChecked="{Binding IsSelected}"
                                     Content="{Binding Name}"
                                     TextColor="WhiteSmoke" />
                    </DataTemplate>
                </BindableLayout.ItemTemplate>
            </HorizontalStackLayout>

            <!-- Time / Repetition Type Selection -->
            <Label Text="Time / Repetition" TextColor="WhiteSmoke"/>
            <VerticalStackLayout Spacing="5">
                <RadioButton GroupName="TimeTypeGroup" Content="None (Any time)" TextColor="WhiteSmoke"
                             IsChecked="{Binding IsTimeTypeNone}" />
                <RadioButton GroupName="TimeTypeGroup" Content="Specific Date" TextColor="WhiteSmoke"
                             IsChecked="{Binding IsTimeTypeSpecificDate}" />
                <RadioButton GroupName="TimeTypeGroup" Content="Repeating" TextColor="WhiteSmoke"
                              IsChecked="{Binding IsTimeTypeRepeating}" />
            </VerticalStackLayout>

            <!-- Specific Date Picker (Visible only when SpecificDate is selected) -->
            <DatePicker x:Name="DueDatePicker"
                        Date="{Binding DueDate}"
                        TextColor="WhiteSmoke"
                        BackgroundColor="#1E1E1E"
                        IsVisible="{Binding IsTimeTypeSpecificDate}"
                        Margin="20,0,0,0" />

            <!-- Repetition Options Section (Visible only when Repeating is selected) -->
            <VerticalStackLayout Spacing="10" Margin="20,5,0,0"
                                 IsVisible="{Binding IsTimeTypeRepeating}">

                <Label Text="Repeat:" TextColor="LightGray"/>
                <HorizontalStackLayout Spacing="10" BindableLayout.ItemsSource="{Binding RepetitionTypeOptions}">
                    <BindableLayout.ItemTemplate>
                        <DataTemplate x:DataType="vm:SelectableOption(models:TaskRepetitionType)">
                            <RadioButton GroupName="RepetitionTypeGroup"
                                         IsChecked="{Binding IsSelected}"
                                         Content="{Binding Name}"
                                         TextColor="WhiteSmoke" />
                        </DataTemplate>
                    </BindableLayout.ItemTemplate>
                </HorizontalStackLayout>

                <!-- Start Date for Repetition -->
                <StackLayout Orientation="Horizontal" Spacing="5" Margin="0,5,0,0">
                    <Label Text="Starting:" VerticalOptions="Center" TextColor="LightGray"/>
                    <DatePicker x:Name="RepeatStartDatePicker"
                                Date="{Binding DueDate}"
                                TextColor="WhiteSmoke"
                                BackgroundColor="#1E1E1E" />
                </StackLayout>

                <!-- Day of Week Picker (Visible only for Weekly repetition) -->
                <StackLayout Orientation="Horizontal" Spacing="5" Margin="0,5,0,0"
                             IsVisible="{Binding IsWeeklySelected}">
                    <Label Text="On:" VerticalOptions="Center" TextColor="LightGray"/>
                    <Picker x:Name="DayOfWeekPicker"
                            TextColor="WhiteSmoke"
                            BackgroundColor="#1E1E1E"
                            ItemsSource="{Binding DaysOfWeek}"
                            SelectedItem="{Binding SelectedDayOfWeek}"
                            WidthRequest="150" />
                </StackLayout>
            </VerticalStackLayout>

            <!-- Action Buttons (Delete, Cancel, Confirm/Update) -->
            <Grid ColumnDefinitions="Auto,*,Auto,Auto" ColumnSpacing="10" Margin="0,20,0,0">

                <!-- Delete Button (Visible only in Edit mode) -->
                <Button Grid.Column="0"
                        Text="Delete"
                        Clicked="OnDeleteClicked"
                        BackgroundColor="DarkRed"
                        TextColor="White"
                        IsVisible="{Binding IsEditMode}"
                        HorizontalOptions="Start" />

                <!-- Grid.Column="1" acts as a flexible spacer -->

                <!-- Cancel Button -->
                <Button Grid.Column="2"
                        Text="Cancel"
                        Clicked="OnCancelClicked"
                        BackgroundColor="#444444"
                        TextColor="WhiteSmoke"
                        HorizontalOptions="End" />

                <!-- Confirm / Update Button -->
                <Button Grid.Column="3"
                        Text="{Binding ConfirmButtonText}"
                        Clicked="OnConfirmClicked"
                        BackgroundColor="{StaticResource Primary}"
                        TextColor="Black"
                        HorizontalOptions="End" />

            </Grid>

        </VerticalStackLayout>
    </ScrollView>
</ContentPage>